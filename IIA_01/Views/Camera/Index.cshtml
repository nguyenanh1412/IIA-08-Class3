@using MvCameraControl
@model List<IDeviceInfo>
<style>
	#viewer {
		background-color: #666;
		height: 100%;
		min-height: 500px;
	}

	#log {
		height: 200px;
		overflow-y: auto;
		background-color: #f8f9fa;
		border: 1px solid #dee2e6;
		padding: 10px;
		white-space: pre-wrap;
		font-size: 0.9rem;
	}
</style>
<div class="container-fluid mt-3">
	<div class="row">
		<!-- Left: Video viewer -->
		<div class="col-md-8">
			<div style="position: relative; width: 100%; padding-top: 75%;">
				<!-- 4:3 tỷ lệ -->
				<canvas id="cameraCanvas"
						style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
				</canvas>
			</div>
		</div>


		<!-- Right: Controls -->
		<div class="col-md-4">
			<h4 class="text-danger fw-bold" id="status">Disconnected</h4>

			<div class="mb-3">
				<label for="deviceSelect" class="form-label">Select Device</label>
				<select class="form-select" id="deviceSelect">
					@{
						foreach (var item in Model)
						{
							<option value="@item.SerialNumber">@(item.TLayerType.ToString() + ": " + item.ManufacturerName + " " + item.ModelName + " (" + item.SerialNumber + ")")</option>
						}
					}
				</select>
			</div>

			<div class="d-grid gap-2 mb-2">
				<button id="conBtn" class="btn btn-success" onclick="connect()">Connect</button>
				<button id="disconBtn" class="btn btn-secondary" onclick="disconnect()">Disconnect</button>
				<button id="capBtn" class="btn btn-primary" onclick="capture()">Capture</button>
			</div>

			<div class="row g-2 mb-2">
				<div class="col">
					<input type="number" class="form-control" id="burstCount" placeholder="image">
				</div>
				<div class="col">
					<input type="number" class="form-control" id="burstRate" placeholder="second">
				</div>
			</div>

			<div class="d-grid gap-2 mb-3">
				<button id="startBurstBtn" class="btn btn-warning" onclick="startBurst()">Burst shooting</button>
				<button id="stopBurstBtn" class="btn btn-danger" onclick="stopBurst()">Stop Burst</button>
			</div>

			<h6>Log</h6>
			<div id="log"></div>
		</div>
	</div>
</div>

<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
	const status = document.getElementById("status");
	const conBtn = $("#conBtn");
	const disconBtn = $("#disconBtn");
	const capBtn = $("#capBtn");
	const burstCount = $("#burstCount");
	const burstRate = $("#burstRate");
	const startBurstBtn = $("#startBurstBtn");
	const stopBurstBtn = $("#stopBurstBtn");

	const log = document.getElementById("log");

	$(window).on("load", function () {
		// Code chạy khi toàn bộ trang (bao gồm ảnh, iframe...) đã tải xong
		console.log("Trang đã load xong hoàn toàn.");
		conBtn.show();
		disconBtn.hide();
		capBtn.hide();
		burstCount.hide();
		burstRate.hide();
		startBurstBtn.hide();
		stopBurstBtn.hide();
	});
	function logMsg(msg) {
	  const timestamp = new Date().toISOString().replace('T', ' ').split('.')[0];
	  log.textContent += `${timestamp} - ${msg}\n`;
	  log.scrollTop = log.scrollHeight;
	}

	function connect() {
	  let value = document.getElementById("deviceSelect").value;
	  $.get('/Camera/ConnectCam', { serial: value }, function (data) {
		  if(data){
			console.log("Server trả về:", data);
			status.textContent = "Connected";
			status.classList.remove('text-danger');
			status.classList.add('text-success');
			alert("Kết nối camera thành công");
			conBtn.hide();
			disconBtn.show();
			capBtn.show();
			burstCount.show();
			burstRate.show();
			startBurstBtn.show();
			stopBurstBtn.hide();
		  }
			else{
			alert("Kết nối camera thất bại ");

			}
		});

	}

	function disconnect() {
	  $.get('/Camera/DisconnectCam', function (data) {
			console.log("Server trả về:", data);
			alert("Đã ngắt kết nối thành công " );
			status.textContent = "Disconnected";
			status.classList.remove('text-success');
			status.classList.add('text-danger');

			conBtn.show();
			disconBtn.hide();
			capBtn.hide();
			burstCount.hide();
			burstRate.hide();
			startBurstBtn.hide();
			stopBurstBtn.hide();

			burstCount.prop("disabled", true)
			burstRate.prop("disabled", true)
		});
	}

	function capture() {
	  $.get('/Camera/Capture', function (data) {
			console.log("Server trả về:", data);
			if(data){
			alert("Đã chụp ảnh ");
			}
			else{
				alert("Chụp ảnh thất bại ");
			}
		});
	}

	function startBurst() {
	  const count = document.getElementById("burstCount").value || 0;
	  const rate = document.getElementById("burstRate").value || 0;
	  logMsg(`Started burst: ${count} images every ${rate} seconds`);
		  $.get('/Camera/BurtShooting',{imageNum: count, secNum: rate}, function (data) {
			  if(data){
				console.log("Server trả về:", data);
				alert("Đã bật chụp liên tục ");
				stopBurstBtn.show();
				startBurstBtn.hide();
				burstCount.prop("disabled", true)
				burstRate.prop("disabled", true)
			  }
			  else{
				  alert("Bật chụp liên tục thất bại ");
			  }
		});
	}

	function stopBurst() {
		  $.get('/Camera/StopBurt', function (data) {
			  if(data){
					console.log("Server trả về:", data);
					alert("Đã tắt chụp liên tục ");
					stopBurstBtn.hide();
					startBurstBtn.show();
					burstCount.prop("disabled", false)
					burstRate.prop("disabled", false)
			  }
			else{
				alert("Tắt chụp liên tục thất bại ")
			}
		});
	}


	const socket = new WebSocket("wss://localhost:7127/ws/camera");

	const canvas = document.getElementById("cameraCanvas");
	const ctx = canvas.getContext("2d");

	socket.onopen = () => {
		console.log("Kết nối WebSocket thành công.");
	};

	socket.onerror = (err) => {
		console.error("Kết nối WebSocket thất bại:", JSON.stringify(err));
	};

	socket.onmessage = (event) => {
		const base64Image = event.data;

		const img = new Image();
		img.onload = function () {
			canvas.width = canvas.clientWidth;
			canvas.height = canvas.clientHeight;
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
		};
		img.src = base64Image;
	};

	socket.onclose = () => {
		console.log("WebSocket đã đóng.");
	};


	var connectionLog = new signalR.HubConnectionBuilder()
	.withUrl("https://localhost:7127/logHub")
	.build();

	connectionLog.on("ReceiveLog", function (log) {
		logMsg(log)
	});

		// Bắt đầu kết nối
	connectionLog.start()
		.then(() => {
			console.log("✅ Kết nối SignalR Hub (logHub) thành công.");
		})
		.catch(err => {
			console.error("❌ Kết nối SignalR Hub thất bại:", err.toString());
	});

</script>
